/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */

import { h, FunctionalComponent } from 'preact';
import { useState, useEffect } from 'preact/hooks';
import htm from 'htm';
import type { TargetedEvent } from 'preact/compat';
import { Theme } from '../../types';
import { testApiKey } from '../../api';

const html = htm.bind(h);

const SettingsInfo: FunctionalComponent = () => html`
    <div class="settings-info">
        <div class="info-card">
            <div class="info-card-header">
                <h3>C√°ch ho·∫°t ƒë·ªông</h3>
            </div>
            <p>
                Magic Tool V1 s·ª≠ d·ª•ng s·ª©c m·∫°nh c·ªßa m√¥ h√¨nh AI Google Gemini ƒë·ªÉ th·ª±c hi·ªán c√°c t√°c v·ª• ch·ªânh s·ª≠a ·∫£nh.
            </p>
            <p>
                ƒê·ªÉ ƒë·∫£m b·∫£o t√≠nh b·∫£o m·∫≠t v√† cho ph√©p b·∫°n to√†n quy·ªÅn ki·ªÉm so√°t vi·ªác s·ª≠ d·ª•ng, ·ª©ng d·ª•ng y√™u c·∫ßu b·∫°n cung c·∫•p API Key c·ªßa ri√™ng b·∫°n. M·ªçi y√™u c·∫ßu x·ª≠ l√Ω ·∫£nh s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán th√¥ng qua key c·ªßa b·∫°n.
            </p>
        </div>
         <div class="info-card">
            <div class="info-card-header">
                <h3>L√†m th·∫ø n√†o ƒë·ªÉ l·∫•y API Key?</h3>
            </div>
            <ul>
                <li><strong>B∆∞·ªõc 1:</strong> Truy c·∫≠p v√†o Google AI Studio.</li>
                <li><strong>B∆∞·ªõc 2:</strong> Nh·∫•p v√†o n√∫t "Get API Key" (L·∫•y kh√≥a API).</li>
                <li><strong>B∆∞·ªõc 3:</strong> T·∫°o m·ªôt kh√≥a API m·ªõi trong d·ª± √°n c·ªßa b·∫°n.</li>
                <li><strong>B∆∞·ªõc 4:</strong> Sao ch√©p kh√≥a v√† d√°n v√†o √¥ b√™n tr√°i.</li>
            </ul>
             <a href="https://aistudio.google.com/app/apikey" target="_blank" rel="noopener noreferrer" class="youtube-link">
                <span>L·∫•y API Key t·∫°i Google AI Studio</span>
            </a>
        </div>
    </div>
`;


interface SettingsAppProps {
    onClearCache: () => void;
    theme: Theme;
    setTheme: (theme: Theme) => void;
}

export const SettingsApp: FunctionalComponent<SettingsAppProps> = ({ onClearCache, theme, setTheme }) => {
    const [apiKeyInput, setApiKeyInput] = useState('');
    const [apiKeyStatus, setApiKeyStatus] = useState<{ message: string; type: 'success' | 'warning' | 'error' } | null>(null);
    const [saveStatusMessage, setSaveStatusMessage] = useState('');
    const [isTesting, setIsTesting] = useState(false);
    const [keySource, setKeySource] = useState<'custom' | 'default' | 'none'>('none');

    useEffect(() => {
        const savedKey = localStorage.getItem('gemini_api_key') || '';
        setApiKeyInput(savedKey);

        if (savedKey) {
            setKeySource('custom');
        } else if (process.env.API_KEY) {
            setKeySource('default');
        } else {
            setKeySource('none');
            setApiKeyStatus({ message: 'Ch∆∞a c√≥ API key n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p.', type: 'warning' });
        }
    }, []);

    const handleTestKey = async () => {
        setIsTesting(true);
        setApiKeyStatus(null);
        const result = await testApiKey(apiKeyInput);
        setApiKeyStatus(result);
        setIsTesting(false);
    };

    const handleSaveKey = () => {
        const keyToSave = apiKeyInput.trim();
        setApiKeyStatus(null); // Clear previous test results on save

        if (keyToSave) {
            localStorage.setItem('gemini_api_key', keyToSave);
            setKeySource('custom');
        } else {
            localStorage.removeItem('gemini_api_key');
            setApiKeyInput(''); // Clear the input field visually
            if (process.env.API_KEY) {
                setKeySource('default');
            } else {
                setKeySource('none');
                setApiKeyStatus({ message: 'Ch∆∞a c√≥ API key n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p.', type: 'warning' });
            }
        }
        setSaveStatusMessage('ƒê√£ l∆∞u th√†nh c√¥ng!');
        setTimeout(() => setSaveStatusMessage(''), 3000);
    };
    
    return html`
        <div class="settings-app-layout">
            <div class="settings-panel">
                <h2>C√†i ƒë·∫∑t</h2>
                 <div class="form-group">
                    <h3>Google Gemini API Key</h3>
                    <p class="settings-description">
                        ƒê·ªÉ s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng AI, b·∫°n c·∫ßn cung c·∫•p API Key c·ªßa ri√™ng m√¨nh t·ª´ Google.
                    </p>
                    <label for="api-key">Nh·∫≠p API Key c·ªßa b·∫°n</label>
                    ${keySource === 'custom' && html`<div class="api-status" style=${{marginBottom: '0.5rem', marginTop: '0.5rem'}}>Tr·∫°ng th√°i: ƒêang d√πng key tu·ª≥ ch·ªânh.</div>`}
                    ${keySource === 'default' && html`<div class="api-status" style=${{marginBottom: '0.5rem', marginTop: '0.5rem'}}>Tr·∫°ng th√°i: ƒêang d√πng key m·∫∑c ƒë·ªãnh c·ªßa h·ªá th·ªëng.</div>`}
                    <input 
                        type="password" 
                        id="api-key" 
                        value=${apiKeyInput} 
                        onInput=${(e: TargetedEvent<HTMLInputElement>) => setApiKeyInput(e.currentTarget.value)}
                        placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                    />
                    ${apiKeyStatus && html`
                        <div class="api-test-result ${apiKeyStatus.type}">
                            ${apiKeyStatus.message}
                        </div>
                    `}
                </div>
                <div class="actions" style=${{justifyContent: 'flex-start', paddingTop: 0, marginTop: '1rem', marginBottom: '2rem'}}>
                    <button class="btn btn-secondary" onClick=${handleTestKey} disabled=${isTesting}>
                        ${isTesting ? 'ƒêang ki·ªÉm tra...' : 'Ki·ªÉm tra Key'}
                    </button>
                     <button class="btn btn-primary" onClick=${handleSaveKey}>
                        L∆∞u Key
                    </button>
                </div>
                 ${saveStatusMessage && html`<div class="save-status-message">${saveStatusMessage}</div>`}
                

                 <div class="form-group">
                    <h3>Giao di·ªán</h3>
                    <p class="settings-description">
                        Ch·ªçn giao di·ªán s√°ng ho·∫∑c t·ªëi cho ·ª©ng d·ª•ng.
                    </p>
                    <div class="radio-group">
                        <label>
                            <input type="radio" name="theme" value="light" checked=${theme === 'light'} onChange=${() => setTheme('light')} />
                            S√°ng
                        </label>
                        <label>
                            <input type="radio" name="theme" value="dark" checked=${theme === 'dark'} onChange=${() => setTheme('dark')} />
                            T·ªëi
                        </label>
                    </div>
                </div>
                
                <div class="form-group">
                    <h3>H·ªá th·ªëng</h3>
                    <button class="btn" onClick=${onClearCache} style=${{width: '100%', background: '#ff6b6b', color: 'white', marginTop: '0.5rem'}}>
                        üîÑ X√≥a Cache & T·∫£i l·∫°i trang
                    </button>
                </div>
            </div>
             <${SettingsInfo} />
        </div>
    `;
};